# app.py ‚Äî Streamlit GUI (multi-face + compact + confidence bar + warnings)
import os, sys
from pathlib import Path
import streamlit as st
from PIL import Image

# === ƒë·∫£m b·∫£o src c√≥ th·ªÉ import ===
PROJECT_ROOT = Path(__file__).resolve().parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

st.set_page_config(page_title="Elderly Age Detection", page_icon="üßì", layout="wide")

# ====== CSS t√πy ch·ªânh ======
st.markdown("""
<style>
.block-container { max-width: 1100px; padding-top: 1rem; padding-bottom: 1rem; }
img { max-width: 500px !important; height: auto; display: block; margin: auto; }
.big-score { font-size: 30px; font-weight: 700; }
.ok-chip  { background:#e6ffed; color:#037a24; padding:4px 10px; border-radius:10px; display:inline-block; font-size:14px; }
.bad-chip { background:#ffe9e9; color:#b00020; padding:4px 10px; border-radius:10px; display:inline-block; font-size:14px; }
.muted { color:#6b7280; }
.stTabs [role="tablist"] { gap: 8px; }
.stTabs [role="tab"] { font-size: 14px; padding: 4px 10px; }
.card { border:1px solid #e5e7eb; border-radius:12px; padding:16px; margin-bottom:1rem; }
</style>
""", unsafe_allow_html=True)

st.title("üßì Elderly Age Detection & Estimation")

# ========== SIDEBAR ==========
with st.sidebar:
    st.header("‚öôÔ∏è Thi·∫øt l·∫≠p")
    thr = st.slider("Threshold elderly (cho inference)", 0.10, 0.90, 0.50, 0.01)
    blur_cut = st.slider("Ng∆∞·ª°ng 'm·ªù' (Laplacian < ‚Ä¶)", 10, 200, 90, 1)
    force_crop = st.checkbox("Crop m·∫∑t tr∆∞·ªõc khi embed", value=True)
    mode = st.radio(
        "Ch·∫ø ƒë·ªô hi·ªÉn th·ªã",
        ["Chu·∫©n ƒë·ªÅ b√†i", "Chuy√™n gia"],
        index=0,
        help="Chu·∫©n ƒë·ªÅ b√†i: ch·ªâ hi·ªán tu·ªïi khi elderly. Chuy√™n gia: hi·ªán th√™m g·ª£i √Ω tu·ªïi cho m·ªçi ·∫£nh."
    )
    st.divider()
    st.caption(f"Working dir: `{os.getcwd()}`")
    st.caption(f"Python: `{sys.version.split()[0]}`")

@st.cache_resource(show_spinner=False)
def load_pipe():
    from src.infer_facenet_rf import ElderlyAgePipeline, MODEL_DIR
    pipe = ElderlyAgePipeline()  # cache m√¥ h√¨nh 1 l·∫ßn
    thr_file = (MODEL_DIR / "elderly_threshold.txt")
    thr_auto = None
    if thr_file.exists():
        try: thr_auto = float(thr_file.read_text().strip())
        except: pass
    return pipe, thr_auto

pipe, thr_auto = load_pipe()

with st.sidebar:
    if thr_auto is not None:
        st.caption("Threshold elderly (t·ª± ƒë·ªông t·ª´ val):")
        st.code(str(thr_auto))

# ========== UPLOAD ==========
uploaded = st.file_uploader("T·∫£i ·∫£nh ch√¢n dung (JPG/PNG)", type=["jpg","jpeg","png"])
if not uploaded:
    st.info("üëÜ Ch·ªçn 1 ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()

img = Image.open(uploaded).convert("RGB")
with st.container():
    st.image(img, caption="·∫¢nh ƒë√£ ch·ªçn", width=500)

tmp_path = PROJECT_ROOT / "_tmp_upload.jpg"
img.save(tmp_path)

# ========== INFERENCE ==========
with st.spinner("ƒêang ph√¢n t√≠ch..."):
    # truy·ªÅn tham s·ªë t·ª´ sidebar, kh√¥ng reload model
    out = pipe.predict_image(str(tmp_path),
                             threshold=thr,
                             blur_cut=blur_cut,
                             force_crop=force_crop)

if not out.get("ok", False):
    st.error(f"‚ùå Kh√¥ng ph√°t hi·ªán khu√¥n m·∫∑t. L√Ω do: {out.get('reason','unknown')}")
    st.stop()

# ========== CH·ªåN KHU√îN M·∫∂T (n·∫øu c√≥ nhi·ªÅu m·∫∑t) ==========
selected_idx = out.get("primary_idx", 0)
faces = out.get("faces", [])

if out.get("faces_detected", 1) > 1 and faces:
    st.info(f"Ph√°t hi·ªán **{out['faces_detected']}** khu√¥n m·∫∑t. "
            f"M·∫∑c ƒë·ªãnh ch·ªçn m·∫∑t **{selected_idx}** theo chi·∫øn l∆∞·ª£c **{out.get('select_strategy')}**.")
    cols = st.columns(min(5, out["faces_detected"]))
    for i, face in enumerate(faces):
        bx = face["box"]
        thumb = img.crop((bx[0], bx[1], bx[2], bx[3])).resize((120, 120))
        with cols[i % len(cols)]:
            st.image(thumb, caption=f"Face {i}", use_container_width=True)
            if st.button(f"Ch·ªçn {i}", key=f"pick_{i}"):
                selected_idx = i

    # ƒë·ªìng b·ªô l·∫°i top-level cho UI d∆∞·ªõi
    pf = faces[selected_idx]
    for k in ["quality_flags","quality_stats","prob_old","is_old","age_group","pred_age_official","pred_age_all_hint"]:
        out[k] = pf[k]
    out["primary_idx"] = selected_idx

# ========== TABS ==========
tab1, tab2, tab3 = st.tabs(["‚úÖ K·∫øt qu·∫£", "üîé Chi ti·∫øt", "üß™ JSON"])

with tab1:
    c1, c2 = st.columns(2)
    with c1:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.caption("X√°c su·∫•t elderly")
        st.markdown(f"<div class='big-score'>{out['prob_old']*100:.1f}%</div>", unsafe_allow_html=True)
        st.caption("Elderly?")
        st.markdown(f"<span class='ok-chip'>C√≥</span>" if out["is_old"] else f"<span class='bad-chip'>Kh√¥ng</span>", unsafe_allow_html=True)
        st.caption("Nh√≥m tu·ªïi")
        st.markdown(f"**{out['age_group']}**")
        st.markdown("</div>", unsafe_allow_html=True)

    with c2:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        pred_official = out["pred_age_official"]          # tu·ªïi khi elderly
        pred_hint = int(round(out["pred_age_all_hint"]))  # g·ª£i √Ω t·ª´ reg_all

        st.caption("Tu·ªïi (elderly)")
        if out["is_old"] and pred_official is not None:
            st.markdown(f"<div class='big-score'>{int(round(pred_official))}</div>", unsafe_allow_html=True)
        else:
            st.markdown("<div class='muted'>‚Äî</div>", unsafe_allow_html=True)

        if mode == "Chuy√™n gia":
            st.caption("G·ª£i √Ω tu·ªïi (m·ªçi ·∫£nh)")
            st.markdown(f"**{pred_hint}**")

        st.caption("S·ªë khu√¥n m·∫∑t")
        st.markdown(f"**{out.get('faces_detected',1)}**")
        st.markdown("</div>", unsafe_allow_html=True)

    # ========== CONFIDENCE BAR + WARNING ==========
    st.markdown("<div class='card'>", unsafe_allow_html=True)
    st.subheader("üîí ƒê·ªô ch·∫Øc ch·∫Øn")
    p = float(out["prob_old"])
    thr_now = float(thr)
    st.progress(int(round(p * 100)))
    st.write(f"**{p*100:.1f}%**  ‚Ä¢  Ng∆∞·ª°ng hi·ªán t·∫°i: **{thr_now:.2f}**")

    uncertain_margin = 0.07
    if abs(p - thr_now) <= uncertain_margin:
        st.warning("‚ö†Ô∏è X√°c su·∫•t n·∫±m g·∫ßn ng∆∞·ª°ng ‚Äî k·∫øt qu·∫£ c√≥ th·ªÉ ch∆∞a ch·∫Øc ch·∫Øn.")

    qf = out["quality_flags"]
    low_quality_msgs = []
    if qf.get("blurry"): low_quality_msgs.append("·∫¢nh m·ªù (blurry)")
    if qf.get("too_dark"): low_quality_msgs.append("·∫¢nh t·ªëi (too dark)")
    if qf.get("too_bright"): low_quality_msgs.append("·∫¢nh qu√° s√°ng (too bright)")
    if low_quality_msgs:
        st.warning("‚ö†Ô∏è " + " ‚Ä¢ ".join(low_quality_msgs) + " ‚Üí n√™n ch·ªçn ·∫£nh r√µ, s√°ng, ch√≠nh di·ªán h∆°n.")

    delta = abs(p - thr_now)
    if delta >= 0.25:
        st.success("M·ª©c tin c·∫≠y: **Cao**")
    elif delta >= 0.12:
        st.info("M·ª©c tin c·∫≠y: **Trung b√¨nh**")
    else:
        st.warning("M·ª©c tin c·∫≠y: **Th·∫•p**")
    st.markdown("</div>", unsafe_allow_html=True)

with tab2:
    st.subheader("‚ö†Ô∏è Ch·∫•t l∆∞·ª£ng ·∫£nh")
    qf = out["quality_flags"]; qs = out["quality_stats"]
    c1, c2 = st.columns(2)
    with c1:
        st.write(
            f"- **Blurry**: `{qf['blurry']}`\n"
            f"- **Too dark**: `{qf['too_dark']}`\n"
            f"- **Too bright**: `{qf['too_bright']}`"
        )
    with c2:
        st.write(
            f"- **Laplacian Var**: `{qs.get('laplacian_var')}`\n"
            f"- **Gray Mean**: `{qs.get('gray_mean')}`"
        )

with tab3:
    st.json(out)

st.success("‚úÖ Xong! Chuy·ªÉn tab ƒë·ªÉ xem chi ti·∫øt ho·∫∑c ch·ªçn ·∫£nh kh√°c.")
